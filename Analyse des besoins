Introduction :

Notre projet concerne le jeu Puissance 4++, nous connaissons tous ce jeu et nous devrons pouvoir y jouer en mode normal ainsi qu'au mode avancé. 

Ce choix sera demandé à l'exécution du jeu à l'utilisateur. Suivant son choix, il poura déterminer le nombre de joueurs ainsi que son pseudo pour l'enregistrement de la partie. 

Nous allons implémentrer trois niveaux de difficulté qui va varier de débutant, intermédiaire et hardcore  qui va limiter le temps de réflexion du joueur. Si le temps est écoulé, la pièce sera aléatoirement placée, de plus dans le mode avancé (Puissance 4++), le type de la pièce et son emplacement seront choisis de façon aléatoire. Le joueur devra choisir un pseudo et la couleur de ses pions.

facultatif : Jouer contre l'ordinateur, interface graphique, possibilité de revoir sa partie

Règles Puissance 4 :

Le but du jeu est d'aligner 4 pions sur une grille comptant 6 rangées et 7 colonnes. Chaque joueur dispose de 21 pions d'une couleur (par convention, en général jaune ou rouge). Tour à tour les deux joueurs placent un pion dans la colonne de leur choix, le pion coulisse alors jusqu'à la position la plus basse possible dans la dite colonne à la suite de quoi c'est à l'adversaire de jouer. Le vainqueur est le joueur qui réalise le premier un alignement (horizontal, vertical ou diagonal) d'au moins quatre pions de sa couleur. Si, alors que toutes les cases de la grille de jeu sont remplies, aucun des deux joueurs n'a réalisé un tel alignement, la partie est déclarée nulle.

Règles Puissance 4++ : 

Contrainte :

Nous ne disposons que de 38h effectives de cours et la deadline du projet est fixée au 16/12/16. 
Nous allons programmer en langage C.
Nous allons utiliser Github pour gérer le versioning, l'utilisation des branches est un avantage non négligeable. Pour la génération de de la documentation, nous allons utiliser Doxygen. 
   


Conception :

Une matrice pour la grille
Un fichier pour les meilleurs scores
Un fichier pour sauvegarder la partie
typedef enum {jaune, rouge} t_couleur
typedef enum {creuse, pleine, bloquante} t_type 
typedef struct {t_couleur couleur ; t_type type ;} t_piece

Fonction main 

void choix_jeu()

void choix_diff()

Fonction Puissance 4

void init_grille(t_piece grille[N][M])         N : 7  M : 6

void afficher_grille(t_piece grille[N][M])

void placer_pion(int colonne, t_piece[N][M])

int victoire(t_piece[N][M])

int egalite(t_piece[N][M])

void record(int nb_coup)

void replay()

void calcul_temps()

void placement_aleatoire(t_piece grille[N][M])




Fonction Puissance 4++

void init_grille(t_piece grille[N][M])         N : 7  M : 6

void afficher_grille(t_piece grille[N][M])

int victoire(t_piece[N][M])

int egalite(t_piece[N][M])

void record(int nb_coup)

void replay()

